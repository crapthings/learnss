#!/usr/bin/env bash
# learn shell script

create () {

clear

echo -e "create new project into ${PWD}"

local PROJECTNAME=$1

while [[ -z $PROJECTNAME ]]; do
	echo -n "project name: "
	read PROJECTNAME
done

if [[ -d $PROJECTNAME ]]; then
	echo "$PROJECTNAME is exist..."
	exit 1
fi

meteor create $PROJECTNAME > /dev/null
echo "project $PROJECTNAME created"

cd $PROJECTNAME

echo "adding some packages..."

cat << _packages_ >> .meteor/packages

accounts-password
coffeescript
dalgard:jade
mquandalle:stylus
stevezhu:lodash
momentjs:moment
iron:router
zimme:active-route
matb33:collection-hooks
dburles:collection-helpers
aldeed:collection2
aldeed:autoform
manuel:viewmodel
_packages_

echo "accounts password added"
echo "coffeescript added"
echo "jade added"
echo "stylus added"
echo "lodash added"
echo "moment added"
echo "iron router added"
echo "active route added"
echo "collection hooks added"
echo "collection helpers added"
echo "collection2 added"
echo "autoform added"
echo "viewmodel added"

cd ..

rm $PROJECTNAME/*

# boilerplate project

mkdir -p $PROJECTNAME/{client,server,public,collections,lib}

mkdir -p $PROJECTNAME/{client/lib,client/compatibility,client/styles}

mkdir -p $PROJECTNAME/{client/templates,client/templates/ui,client/templates/home}

mkdir -p $PROJECTNAME/{client/templates,client/templates/login}

# users collection

cat << _boilerplate_ > $PROJECTNAME/collections/users.coffee

_boilerplate_

# head template

cat << _boilerplate_ > $PROJECTNAME/client/head.jade
head
	meta(charset='UTF-8')
	title $PROJECTNAME
_boilerplate_

# router config

cat << '_boilerplate_' > $PROJECTNAME/client/router.coffee
Router.configure
	layoutTemplate: 'layout'

Router.onBeforeAction ->
	unless Meteor.userId()
		@layout 'blank'
		@render 'login'
	else
		do @next

_boilerplate_

# ui template

cat << _boilerplate_ > $PROJECTNAME/client/templates/ui/layout.jade
template(name='layout')
	+topnav
	+yield
_boilerplate_

cat << _boilerplate_ > $PROJECTNAME/client/templates/ui/blank.jade
template(name='blank')
	+yield
_boilerplate_

cat << _boilerplate_ > $PROJECTNAME/client/templates/ui/debugnav.jade
template(name='debugnav')
	ul
		li
			a(href='/') home
_boilerplate_

cat << _boilerplate_ > $PROJECTNAME/client/templates/ui/topnav.jade
template(name='topnav')
	ul
		li
			a(href='#' onclick='Meteor.logout();') Logout
_boilerplate_

# login template

cat << _boilerplate_ > $PROJECTNAME/client/templates/login/template.jade
template(name='login')
	form
		input(type='text' name='username' value='demo')
		input(type='password' name='password' value='demo')
		input(type='submit' value='login')
_boilerplate_

# login event

cat << '_boilerplate_' > $PROJECTNAME/client/templates/login/template.coffee
Template.login.events
	'submit form': (e, t) ->
		do e.preventDefault
		$username = do ($ t.find '[name="username"]').val
		$password = do ($ t.find '[name="password"]').val
		Meteor.loginWithPassword $username, $password, (err) ->
			unless err
				Router.go 'home'
_boilerplate_

# home template

cat << _boilerplate_ > $PROJECTNAME/client/templates/home/template.jade
template(name='home')
	h1 home
_boilerplate_

# home router

cat << _boilerplate_ > $PROJECTNAME/client/templates/home/router.coffee
Router.route '/', ->
	@render 'home'
,
	name: 'home'
_boilerplate_

# random data

cat << _boilerplate_ > $PROJECTNAME/server/fixtures.coffee
# feed dummy data

Meteor.startup ->

	unless Meteor.users.findOne { username: 'admin' }
		Accounts.createUser
			username: 'admin'
			password: 'admin'

	unless Meteor.users.findOne { username: 'demo' }
		Accounts.createUser
			username: 'demo'
			password: 'demo'
_boilerplate_

echo "done!"

cd $PROJECTNAME

ls

}

router () {

local PROJECTPATH=$PWD
local TEMPLATESPATH=$PROJECTPATH/client/templates
local ROUTERNAME=$1

if [[ -d $PWD/.meteor || -z $ROUTERNAME ]]; then

if [[ -d $TEMPLATESPATH/$ROUTERNAME ]]; then
	echo "$ROUTERNAME router exist"
	exit 1
fi

mkdir -p $TEMPLATESPATH/$ROUTERNAME
cd $TEMPLATESPATH/$ROUTERNAME
touch router.coffee template.jade template.coffee

# router.coffee

cat << _boilerplate_ > $TEMPLATESPATH/$ROUTERNAME/router.coffee
Router.route '/$ROUTERNAME', ->
	@render 'users'
,
	name: '$ROUTERNAME'
_boilerplate_

# template.jade

cat << _boilerplate_ > $TEMPLATESPATH/$ROUTERNAME/template.jade
template(name='$ROUTERNAME')
	h1 $ROUTERNAME
_boilerplate_

# template.coffee

cat << _boilerplate_ > $TEMPLATESPATH/$ROUTERNAME/template.coffee
Template.$ROUTERNAME.viewmodel({})
_boilerplate_

# append router to debug nav

cat << _boilerplate_ >> $TEMPLATESPATH/ui/debugnav.jade
		li
			a(href='/$ROUTERNAME') $ROUTERNAME
_boilerplate_

echo "$ROUTERNAME router added"

else
	echo "you're not in a meteor project"
	exit 1
fi

}

collection () {

local PROJECTPATH=$PWD
local COLLECTIONPATH=$PROJECTPATH/collections
local COLLECTIONNAME=$1

local COLLECTIONNAMECAP=${COLLECTIONNAME^}

if [[ -d $PWD/.meteor || -z $COLLECTIONNAME ]]; then

if [[ -d $COLLECTIONPATH/$COLLECTIONNAME ]]; then
	echo "$COLLECTIONNAME collection exist"
	exit 1
fi

cd $COLLECTIONPATH

# collection.coffee

cat << _boilerplate_ > $COLLECTIONPATH/$COLLECTIONNAME.coffee
@${COLLECTIONNAMECAP} = new Mongo.Collection '$COLLECTIONNAME'
_boilerplate_

echo "$COLLECTIONNAME collection added"

else
	echo "you're not in a meteor project"
	exit 1
fi

}

#

case "$1" in
	"create") create $2;;
	"router") router $2;;
	"collection") collection $2;;
	*) echo "error: unknown command.";;
esac
